{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asraf\\\\Desktop\\\\Development\\\\ReactJS\\\\SpotifyDashboard\\\\client\\\\src\\\\components\\\\Authenticator.jsx\",\n    _s = $RefreshSig$();\n\nimport { React, useEffect } from 'react';\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport Login from './Login';\nimport Home from '../container/Home';\nimport { loggedIn, setTokens, getAccessToken } from '../utils/localstorage';\nimport { checkExpired } from '../utils/spotify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Authenticator = () => {\n  _s();\n\n  let navigate = useNavigate();\n  const location = useLocation();\n  const params = new URLSearchParams(location.search);\n  var accessToken = params.get(\"accessToken\");\n  var refreshToken = params.get(\"refreshToken\");\n  var expiresIn = params.get(\"expiresIn\");\n  useEffect(() => {\n    if (!loggedIn() && accessToken != null && refreshToken != null && expiresIn != null) {\n      setTokens(accessToken, refreshToken);\n      navigate('/');\n    }\n  }, [accessToken, refreshToken, expiresIn]);\n\n  if (loggedIn()) {\n    ({\n      accessToken\n    } = getAccessToken());\n    checkExpired();\n    return /*#__PURE__*/_jsxDEV(Home, {\n      accessToken: accessToken\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this);\n  } else return /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 18\n  }, this);\n};\n\n_s(Authenticator, \"gMsdikdDs1f1NUVrv3Ag60oK04k=\", false, function () {\n  return [useNavigate, useLocation];\n});\n\n_c = Authenticator;\nexport default Authenticator;\n\nvar _c;\n\n$RefreshReg$(_c, \"Authenticator\");","map":{"version":3,"sources":["C:/Users/asraf/Desktop/Development/ReactJS/SpotifyDashboard/client/src/components/Authenticator.jsx"],"names":["React","useEffect","useLocation","useNavigate","Login","Home","loggedIn","setTokens","getAccessToken","checkExpired","Authenticator","navigate","location","params","URLSearchParams","search","accessToken","get","refreshToken","expiresIn"],"mappings":";;;AAAA,SAASA,KAAT,EAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,kBAAzC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AAEA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,cAA9B,QAAoD,uBAApD;AACA,SAASC,YAAT,QAA6B,kBAA7B;;;AACA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AACxB,MAAIC,QAAQ,GAAGR,WAAW,EAA1B;AACA,QAAMS,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAMW,MAAM,GAAG,IAAIC,eAAJ,CAAoBF,QAAQ,CAACG,MAA7B,CAAf;AACA,MAAIC,WAAW,GAAGH,MAAM,CAACI,GAAP,CAAW,aAAX,CAAlB;AACA,MAAIC,YAAY,GAAGL,MAAM,CAACI,GAAP,CAAW,cAAX,CAAnB;AACA,MAAIE,SAAS,GAAGN,MAAM,CAACI,GAAP,CAAW,WAAX,CAAhB;AAGAhB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACK,QAAQ,EAAT,IAAeU,WAAW,IAAI,IAA9B,IAAsCE,YAAY,IAAI,IAAtD,IAA8DC,SAAS,IAAI,IAA/E,EAAqF;AACjFZ,MAAAA,SAAS,CAACS,WAAD,EAAcE,YAAd,CAAT;AACAP,MAAAA,QAAQ,CAAC,GAAD,CAAR;AACH;AACJ,GALQ,EAKN,CAACK,WAAD,EAAcE,YAAd,EAA4BC,SAA5B,CALM,CAAT;;AAQA,MAAIb,QAAQ,EAAZ,EAAgB;AACZ,KAAC;AAAEU,MAAAA;AAAF,QAAkBR,cAAc,EAAjC;AACAC,IAAAA,YAAY;AACZ,wBACI,QAAC,IAAD;AAAM,MAAA,WAAW,EAAEO;AAAnB;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH,GAND,MAOK,oBAAQ,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,UAAR;AACR,CAzBD;;GAAMN,a;UACaP,W,EACED,W;;;KAFfQ,a;AA2BN,eAAeA,aAAf","sourcesContent":["import { React, useEffect } from 'react'\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport Login from './Login';\r\nimport Home from '../container/Home'\r\n\r\nimport { loggedIn, setTokens, getAccessToken } from '../utils/localstorage';\r\nimport { checkExpired } from '../utils/spotify'\r\nconst Authenticator = () => {\r\n    let navigate = useNavigate();\r\n    const location = useLocation();\r\n    const params = new URLSearchParams(location.search);\r\n    var accessToken = params.get(\"accessToken\")\r\n    var refreshToken = params.get(\"refreshToken\")\r\n    var expiresIn = params.get(\"expiresIn\")\r\n\r\n\r\n    useEffect(() => {\r\n        if (!loggedIn() && accessToken != null && refreshToken != null && expiresIn != null) {\r\n            setTokens(accessToken, refreshToken)\r\n            navigate('/')\r\n        }\r\n    }, [accessToken, refreshToken, expiresIn])\r\n\r\n\r\n    if (loggedIn()) {\r\n        ({ accessToken } = getAccessToken());\r\n        checkExpired()\r\n        return (\r\n            <Home accessToken={accessToken} />\r\n        )\r\n    }\r\n    else return (<Login />)\r\n}\r\n\r\nexport default Authenticator\r\n"]},"metadata":{},"sourceType":"module"}