{"ast":null,"code":"import { getTokenTimestamp, getRefreshToken, setNewTokens, getExpiresIn } from './localstorage';\nimport axios from 'axios';\nexport function checkExpired() {\n  const expiresIn = getExpiresIn();\n  const expiration_time = expiresIn * 1000;\n  const timeStamp = getTokenTimestamp();\n\n  if (timeStamp != null && Date.now() - timeStamp > expiration_time) {\n    console.warn('Access token has expired, refreshing...');\n    refreshAccessToken();\n  }\n}\n\nasync function refreshAccessToken() {\n  const refreshToken = getRefreshToken();\n  const {\n    data\n  } = await axios.post(\"http://localhost:8888/refresh_token\", {\n    refreshToken\n  });\n\n  if (data != null && data.accessToken) {\n    setNewTokens(data.accessToken);\n  }\n}","map":{"version":3,"sources":["C:/Users/asraf/Desktop/Development/ReactJS/SpotifyDashboard/client/src/utils/auth.js"],"names":["getTokenTimestamp","getRefreshToken","setNewTokens","getExpiresIn","axios","checkExpired","expiresIn","expiration_time","timeStamp","Date","now","console","warn","refreshAccessToken","refreshToken","data","post","accessToken"],"mappings":"AAAA,SAASA,iBAAT,EAA4BC,eAA5B,EAA6CC,YAA7C,EAA2DC,YAA3D,QAA+E,gBAA/E;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,SAASC,YAAT,GAAuB;AAC1B,QAAMC,SAAS,GAAGH,YAAY,EAA9B;AACA,QAAMI,eAAe,GAAGD,SAAS,GAAG,IAApC;AACA,QAAME,SAAS,GAAGR,iBAAiB,EAAnC;;AACA,MAAIQ,SAAS,IAAI,IAAb,IAAqBC,IAAI,CAACC,GAAL,KAAaF,SAAb,GAAyBD,eAAlD,EAAmE;AAC/DI,IAAAA,OAAO,CAACC,IAAR,CAAa,yCAAb;AACAC,IAAAA,kBAAkB;AACrB;AACJ;;AAED,eAAeA,kBAAf,GAAmC;AAC/B,QAAMC,YAAY,GAAGb,eAAe,EAApC;AACA,QAAM;AAACc,IAAAA;AAAD,MAAS,MAAMX,KAAK,CAACY,IAAN,CAAW,qCAAX,EAAkD;AACnEF,IAAAA;AADmE,GAAlD,CAArB;;AAGA,MAAIC,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAACE,WAAzB,EAAqC;AACjCf,IAAAA,YAAY,CAACa,IAAI,CAACE,WAAN,CAAZ;AACH;AACJ","sourcesContent":["import { getTokenTimestamp, getRefreshToken, setNewTokens, getExpiresIn } from './localstorage'\r\nimport axios from 'axios';\r\n\r\nexport function checkExpired(){\r\n    const expiresIn = getExpiresIn();\r\n    const expiration_time = expiresIn * 1000;\r\n    const timeStamp = getTokenTimestamp()\r\n    if (timeStamp != null && Date.now() - timeStamp > expiration_time) {\r\n        console.warn('Access token has expired, refreshing...');\r\n        refreshAccessToken();\r\n    }\r\n}\r\n\r\nasync function refreshAccessToken(){\r\n    const refreshToken = getRefreshToken();\r\n    const {data} = await axios.post(\"http://localhost:8888/refresh_token\", {\r\n        refreshToken\r\n    })\r\n    if (data != null && data.accessToken){\r\n        setNewTokens(data.accessToken)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}